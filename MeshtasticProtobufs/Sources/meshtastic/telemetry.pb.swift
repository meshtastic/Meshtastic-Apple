// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: meshtastic/telemetry.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

///
/// Supported I2C Sensors for telemetry in Meshtastic
public enum TelemetrySensorType: SwiftProtobuf.Enum, Swift.CaseIterable {
  public typealias RawValue = Int

  ///
  /// No external telemetry sensor explicitly set
  case sensorUnset // = 0

  ///
  /// High accuracy temperature, pressure, humidity
  case bme280 // = 1

  ///
  /// High accuracy temperature, pressure, humidity, and air resistance
  case bme680 // = 2

  ///
  /// Very high accuracy temperature
  case mcp9808 // = 3

  ///
  /// Moderate accuracy current and voltage
  case ina260 // = 4

  ///
  /// Moderate accuracy current and voltage
  case ina219 // = 5

  ///
  /// High accuracy temperature and pressure
  case bmp280 // = 6

  ///
  /// High accuracy temperature and humidity
  case shtc3 // = 7

  ///
  /// High accuracy pressure
  case lps22 // = 8

  ///
  /// 3-Axis magnetic sensor
  case qmc6310 // = 9

  ///
  /// 6-Axis inertial measurement sensor
  case qmi8658 // = 10

  ///
  /// 3-Axis magnetic sensor
  case qmc5883L // = 11

  ///
  /// High accuracy temperature and humidity
  case sht31 // = 12

  ///
  /// PM2.5 air quality sensor
  case pmsa003I // = 13

  ///
  /// INA3221 3 Channel Voltage / Current Sensor
  case ina3221 // = 14

  ///
  /// BMP085/BMP180 High accuracy temperature and pressure (older Version of BMP280)
  case bmp085 // = 15

  ///
  /// RCWL-9620 Doppler Radar Distance Sensor, used for water level detection
  case rcwl9620 // = 16

  ///
  /// Sensirion High accuracy temperature and humidity
  case sht4X // = 17

  ///
  /// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
  case veml7700 // = 18

  ///
  /// MLX90632 non-contact IR temperature sensor.
  case mlx90632 // = 19

  ///
  /// TI OPT3001 Ambient Light Sensor
  case opt3001 // = 20

  ///
  /// Lite On LTR-390UV-01 UV Light Sensor
  case ltr390Uv // = 21

  ///
  /// AMS TSL25911FN RGB Light Sensor
  case tsl25911Fn // = 22

  ///
  /// AHT10 Integrated temperature and humidity sensor
  case aht10 // = 23

  ///
  /// DFRobot Lark Weather station (temperature, humidity, pressure, wind speed and direction)
  case dfrobotLark // = 24

  ///
  /// NAU7802 Scale Chip or compatible
  case nau7802 // = 25

  ///
  /// BMP3XX High accuracy temperature and pressure
  case bmp3Xx // = 26

  ///
  /// ICM-20948 9-Axis digital motion processor
  case icm20948 // = 27

  ///
  /// MAX17048 1S lipo battery sensor (voltage, state of charge, time to go)
  case max17048 // = 28

  ///
  /// Custom I2C sensor implementation based on https://github.com/meshtastic/i2c-sensor
  case customSensor // = 29

  ///
  /// MAX30102 Pulse Oximeter and Heart-Rate Sensor
  case max30102 // = 30

  ///
  /// MLX90614 non-contact IR temperature sensor
  case mlx90614 // = 31

  ///
  /// SCD40/SCD41 CO2, humidity, temperature sensor
  case scd4X // = 32

  ///
  /// ClimateGuard RadSens, radiation, Geiger-Muller Tube
  case radsens // = 33

  ///
  /// High accuracy current and voltage
  case ina226 // = 34

  ///
  /// DFRobot Gravity tipping bucket rain gauge
  case dfrobotRain // = 35

  ///
  /// Infineon DPS310 High accuracy pressure and temperature
  case dps310 // = 36

  ///
  /// RAKWireless RAK12035 Soil Moisture Sensor Module
  case rak12035 // = 37
  case UNRECOGNIZED(Int)

  public init() {
    self = .sensorUnset
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .sensorUnset
    case 1: self = .bme280
    case 2: self = .bme680
    case 3: self = .mcp9808
    case 4: self = .ina260
    case 5: self = .ina219
    case 6: self = .bmp280
    case 7: self = .shtc3
    case 8: self = .lps22
    case 9: self = .qmc6310
    case 10: self = .qmi8658
    case 11: self = .qmc5883L
    case 12: self = .sht31
    case 13: self = .pmsa003I
    case 14: self = .ina3221
    case 15: self = .bmp085
    case 16: self = .rcwl9620
    case 17: self = .sht4X
    case 18: self = .veml7700
    case 19: self = .mlx90632
    case 20: self = .opt3001
    case 21: self = .ltr390Uv
    case 22: self = .tsl25911Fn
    case 23: self = .aht10
    case 24: self = .dfrobotLark
    case 25: self = .nau7802
    case 26: self = .bmp3Xx
    case 27: self = .icm20948
    case 28: self = .max17048
    case 29: self = .customSensor
    case 30: self = .max30102
    case 31: self = .mlx90614
    case 32: self = .scd4X
    case 33: self = .radsens
    case 34: self = .ina226
    case 35: self = .dfrobotRain
    case 36: self = .dps310
    case 37: self = .rak12035
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .sensorUnset: return 0
    case .bme280: return 1
    case .bme680: return 2
    case .mcp9808: return 3
    case .ina260: return 4
    case .ina219: return 5
    case .bmp280: return 6
    case .shtc3: return 7
    case .lps22: return 8
    case .qmc6310: return 9
    case .qmi8658: return 10
    case .qmc5883L: return 11
    case .sht31: return 12
    case .pmsa003I: return 13
    case .ina3221: return 14
    case .bmp085: return 15
    case .rcwl9620: return 16
    case .sht4X: return 17
    case .veml7700: return 18
    case .mlx90632: return 19
    case .opt3001: return 20
    case .ltr390Uv: return 21
    case .tsl25911Fn: return 22
    case .aht10: return 23
    case .dfrobotLark: return 24
    case .nau7802: return 25
    case .bmp3Xx: return 26
    case .icm20948: return 27
    case .max17048: return 28
    case .customSensor: return 29
    case .max30102: return 30
    case .mlx90614: return 31
    case .scd4X: return 32
    case .radsens: return 33
    case .ina226: return 34
    case .dfrobotRain: return 35
    case .dps310: return 36
    case .rak12035: return 37
    case .UNRECOGNIZED(let i): return i
    }
  }

  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static let allCases: [TelemetrySensorType] = [
    .sensorUnset,
    .bme280,
    .bme680,
    .mcp9808,
    .ina260,
    .ina219,
    .bmp280,
    .shtc3,
    .lps22,
    .qmc6310,
    .qmi8658,
    .qmc5883L,
    .sht31,
    .pmsa003I,
    .ina3221,
    .bmp085,
    .rcwl9620,
    .sht4X,
    .veml7700,
    .mlx90632,
    .opt3001,
    .ltr390Uv,
    .tsl25911Fn,
    .aht10,
    .dfrobotLark,
    .nau7802,
    .bmp3Xx,
    .icm20948,
    .max17048,
    .customSensor,
    .max30102,
    .mlx90614,
    .scd4X,
    .radsens,
    .ina226,
    .dfrobotRain,
    .dps310,
    .rak12035,
  ]

}

///
/// Key native device metrics such as battery level
public struct DeviceMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// 0-100 (>100 means powered)
  public var batteryLevel: UInt32 {
    get {return _batteryLevel ?? 0}
    set {_batteryLevel = newValue}
  }
  /// Returns true if `batteryLevel` has been explicitly set.
  public var hasBatteryLevel: Bool {return self._batteryLevel != nil}
  /// Clears the value of `batteryLevel`. Subsequent reads from it will return its default value.
  public mutating func clearBatteryLevel() {self._batteryLevel = nil}

  ///
  /// Voltage measured
  public var voltage: Float {
    get {return _voltage ?? 0}
    set {_voltage = newValue}
  }
  /// Returns true if `voltage` has been explicitly set.
  public var hasVoltage: Bool {return self._voltage != nil}
  /// Clears the value of `voltage`. Subsequent reads from it will return its default value.
  public mutating func clearVoltage() {self._voltage = nil}

  ///
  /// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
  public var channelUtilization: Float {
    get {return _channelUtilization ?? 0}
    set {_channelUtilization = newValue}
  }
  /// Returns true if `channelUtilization` has been explicitly set.
  public var hasChannelUtilization: Bool {return self._channelUtilization != nil}
  /// Clears the value of `channelUtilization`. Subsequent reads from it will return its default value.
  public mutating func clearChannelUtilization() {self._channelUtilization = nil}

  ///
  /// Percent of airtime for transmission used within the last hour.
  public var airUtilTx: Float {
    get {return _airUtilTx ?? 0}
    set {_airUtilTx = newValue}
  }
  /// Returns true if `airUtilTx` has been explicitly set.
  public var hasAirUtilTx: Bool {return self._airUtilTx != nil}
  /// Clears the value of `airUtilTx`. Subsequent reads from it will return its default value.
  public mutating func clearAirUtilTx() {self._airUtilTx = nil}

  ///
  /// How long the device has been running since the last reboot (in seconds)
  public var uptimeSeconds: UInt32 {
    get {return _uptimeSeconds ?? 0}
    set {_uptimeSeconds = newValue}
  }
  /// Returns true if `uptimeSeconds` has been explicitly set.
  public var hasUptimeSeconds: Bool {return self._uptimeSeconds != nil}
  /// Clears the value of `uptimeSeconds`. Subsequent reads from it will return its default value.
  public mutating func clearUptimeSeconds() {self._uptimeSeconds = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _batteryLevel: UInt32? = nil
  fileprivate var _voltage: Float? = nil
  fileprivate var _channelUtilization: Float? = nil
  fileprivate var _airUtilTx: Float? = nil
  fileprivate var _uptimeSeconds: UInt32? = nil
}

///
/// Weather station or other environmental metrics
public struct EnvironmentMetrics: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Temperature measured
  public var temperature: Float {
    get {return _storage._temperature ?? 0}
    set {_uniqueStorage()._temperature = newValue}
  }
  /// Returns true if `temperature` has been explicitly set.
  public var hasTemperature: Bool {return _storage._temperature != nil}
  /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
  public mutating func clearTemperature() {_uniqueStorage()._temperature = nil}

  ///
  /// Relative humidity percent measured
  public var relativeHumidity: Float {
    get {return _storage._relativeHumidity ?? 0}
    set {_uniqueStorage()._relativeHumidity = newValue}
  }
  /// Returns true if `relativeHumidity` has been explicitly set.
  public var hasRelativeHumidity: Bool {return _storage._relativeHumidity != nil}
  /// Clears the value of `relativeHumidity`. Subsequent reads from it will return its default value.
  public mutating func clearRelativeHumidity() {_uniqueStorage()._relativeHumidity = nil}

  ///
  /// Barometric pressure in hPA measured
  public var barometricPressure: Float {
    get {return _storage._barometricPressure ?? 0}
    set {_uniqueStorage()._barometricPressure = newValue}
  }
  /// Returns true if `barometricPressure` has been explicitly set.
  public var hasBarometricPressure: Bool {return _storage._barometricPressure != nil}
  /// Clears the value of `barometricPressure`. Subsequent reads from it will return its default value.
  public mutating func clearBarometricPressure() {_uniqueStorage()._barometricPressure = nil}

  ///
  /// Gas resistance in MOhm measured
  public var gasResistance: Float {
    get {return _storage._gasResistance ?? 0}
    set {_uniqueStorage()._gasResistance = newValue}
  }
  /// Returns true if `gasResistance` has been explicitly set.
  public var hasGasResistance: Bool {return _storage._gasResistance != nil}
  /// Clears the value of `gasResistance`. Subsequent reads from it will return its default value.
  public mutating func clearGasResistance() {_uniqueStorage()._gasResistance = nil}

  ///
  /// Voltage measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
  public var voltage: Float {
    get {return _storage._voltage ?? 0}
    set {_uniqueStorage()._voltage = newValue}
  }
  /// Returns true if `voltage` has been explicitly set.
  public var hasVoltage: Bool {return _storage._voltage != nil}
  /// Clears the value of `voltage`. Subsequent reads from it will return its default value.
  public mutating func clearVoltage() {_uniqueStorage()._voltage = nil}

  ///
  /// Current measured (To be depreciated in favor of PowerMetrics in Meshtastic 3.x)
  public var current: Float {
    get {return _storage._current ?? 0}
    set {_uniqueStorage()._current = newValue}
  }
  /// Returns true if `current` has been explicitly set.
  public var hasCurrent: Bool {return _storage._current != nil}
  /// Clears the value of `current`. Subsequent reads from it will return its default value.
  public mutating func clearCurrent() {_uniqueStorage()._current = nil}

  ///
  /// relative scale IAQ value as measured by Bosch BME680 . value 0-500.
  /// Belongs to Air Quality but is not particle but VOC measurement. Other VOC values can also be put in here.
  public var iaq: UInt32 {
    get {return _storage._iaq ?? 0}
    set {_uniqueStorage()._iaq = newValue}
  }
  /// Returns true if `iaq` has been explicitly set.
  public var hasIaq: Bool {return _storage._iaq != nil}
  /// Clears the value of `iaq`. Subsequent reads from it will return its default value.
  public mutating func clearIaq() {_uniqueStorage()._iaq = nil}

  ///
  /// RCWL9620 Doppler Radar Distance Sensor, used for water level detection. Float value in mm.
  public var distance: Float {
    get {return _storage._distance ?? 0}
    set {_uniqueStorage()._distance = newValue}
  }
  /// Returns true if `distance` has been explicitly set.
  public var hasDistance: Bool {return _storage._distance != nil}
  /// Clears the value of `distance`. Subsequent reads from it will return its default value.
  public mutating func clearDistance() {_uniqueStorage()._distance = nil}

  ///
  /// VEML7700 high accuracy ambient light(Lux) digital 16-bit resolution sensor.
  public var lux: Float {
    get {return _storage._lux ?? 0}
    set {_uniqueStorage()._lux = newValue}
  }
  /// Returns true if `lux` has been explicitly set.
  public var hasLux: Bool {return _storage._lux != nil}
  /// Clears the value of `lux`. Subsequent reads from it will return its default value.
  public mutating func clearLux() {_uniqueStorage()._lux = nil}

  ///
  /// VEML7700 high accuracy white light(irradiance) not calibrated digital 16-bit resolution sensor.
  public var whiteLux: Float {
    get {return _storage._whiteLux ?? 0}
    set {_uniqueStorage()._whiteLux = newValue}
  }
  /// Returns true if `whiteLux` has been explicitly set.
  public var hasWhiteLux: Bool {return _storage._whiteLux != nil}
  /// Clears the value of `whiteLux`. Subsequent reads from it will return its default value.
  public mutating func clearWhiteLux() {_uniqueStorage()._whiteLux = nil}

  ///
  /// Infrared lux
  public var irLux: Float {
    get {return _storage._irLux ?? 0}
    set {_uniqueStorage()._irLux = newValue}
  }
  /// Returns true if `irLux` has been explicitly set.
  public var hasIrLux: Bool {return _storage._irLux != nil}
  /// Clears the value of `irLux`. Subsequent reads from it will return its default value.
  public mutating func clearIrLux() {_uniqueStorage()._irLux = nil}

  ///
  /// Ultraviolet lux
  public var uvLux: Float {
    get {return _storage._uvLux ?? 0}
    set {_uniqueStorage()._uvLux = newValue}
  }
  /// Returns true if `uvLux` has been explicitly set.
  public var hasUvLux: Bool {return _storage._uvLux != nil}
  /// Clears the value of `uvLux`. Subsequent reads from it will return its default value.
  public mutating func clearUvLux() {_uniqueStorage()._uvLux = nil}

  ///
  /// Wind direction in degrees
  /// 0 degrees = North, 90 = East, etc...
  public var windDirection: UInt32 {
    get {return _storage._windDirection ?? 0}
    set {_uniqueStorage()._windDirection = newValue}
  }
  /// Returns true if `windDirection` has been explicitly set.
  public var hasWindDirection: Bool {return _storage._windDirection != nil}
  /// Clears the value of `windDirection`. Subsequent reads from it will return its default value.
  public mutating func clearWindDirection() {_uniqueStorage()._windDirection = nil}

  ///
  /// Wind speed in m/s
  public var windSpeed: Float {
    get {return _storage._windSpeed ?? 0}
    set {_uniqueStorage()._windSpeed = newValue}
  }
  /// Returns true if `windSpeed` has been explicitly set.
  public var hasWindSpeed: Bool {return _storage._windSpeed != nil}
  /// Clears the value of `windSpeed`. Subsequent reads from it will return its default value.
  public mutating func clearWindSpeed() {_uniqueStorage()._windSpeed = nil}

  ///
  /// Weight in KG
  public var weight: Float {
    get {return _storage._weight ?? 0}
    set {_uniqueStorage()._weight = newValue}
  }
  /// Returns true if `weight` has been explicitly set.
  public var hasWeight: Bool {return _storage._weight != nil}
  /// Clears the value of `weight`. Subsequent reads from it will return its default value.
  public mutating func clearWeight() {_uniqueStorage()._weight = nil}

  ///
  /// Wind gust in m/s
  public var windGust: Float {
    get {return _storage._windGust ?? 0}
    set {_uniqueStorage()._windGust = newValue}
  }
  /// Returns true if `windGust` has been explicitly set.
  public var hasWindGust: Bool {return _storage._windGust != nil}
  /// Clears the value of `windGust`. Subsequent reads from it will return its default value.
  public mutating func clearWindGust() {_uniqueStorage()._windGust = nil}

  ///
  /// Wind lull in m/s
  public var windLull: Float {
    get {return _storage._windLull ?? 0}
    set {_uniqueStorage()._windLull = newValue}
  }
  /// Returns true if `windLull` has been explicitly set.
  public var hasWindLull: Bool {return _storage._windLull != nil}
  /// Clears the value of `windLull`. Subsequent reads from it will return its default value.
  public mutating func clearWindLull() {_uniqueStorage()._windLull = nil}

  ///
  /// Radiation in µR/h
  public var radiation: Float {
    get {return _storage._radiation ?? 0}
    set {_uniqueStorage()._radiation = newValue}
  }
  /// Returns true if `radiation` has been explicitly set.
  public var hasRadiation: Bool {return _storage._radiation != nil}
  /// Clears the value of `radiation`. Subsequent reads from it will return its default value.
  public mutating func clearRadiation() {_uniqueStorage()._radiation = nil}

  ///
  /// Rainfall in the last hour in mm
  public var rainfall1H: Float {
    get {return _storage._rainfall1H ?? 0}
    set {_uniqueStorage()._rainfall1H = newValue}
  }
  /// Returns true if `rainfall1H` has been explicitly set.
  public var hasRainfall1H: Bool {return _storage._rainfall1H != nil}
  /// Clears the value of `rainfall1H`. Subsequent reads from it will return its default value.
  public mutating func clearRainfall1H() {_uniqueStorage()._rainfall1H = nil}

  ///
  /// Rainfall in the last 24 hours in mm
  public var rainfall24H: Float {
    get {return _storage._rainfall24H ?? 0}
    set {_uniqueStorage()._rainfall24H = newValue}
  }
  /// Returns true if `rainfall24H` has been explicitly set.
  public var hasRainfall24H: Bool {return _storage._rainfall24H != nil}
  /// Clears the value of `rainfall24H`. Subsequent reads from it will return its default value.
  public mutating func clearRainfall24H() {_uniqueStorage()._rainfall24H = nil}

  ///
  /// Soil moisture measured (% 1-100)
  public var soilMoisture: UInt32 {
    get {return _storage._soilMoisture ?? 0}
    set {_uniqueStorage()._soilMoisture = newValue}
  }
  /// Returns true if `soilMoisture` has been explicitly set.
  public var hasSoilMoisture: Bool {return _storage._soilMoisture != nil}
  /// Clears the value of `soilMoisture`. Subsequent reads from it will return its default value.
  public mutating func clearSoilMoisture() {_uniqueStorage()._soilMoisture = nil}

  ///
  /// Soil temperature measured (*C)
  public var soilTemperature: Float {
    get {return _storage._soilTemperature ?? 0}
    set {_uniqueStorage()._soilTemperature = newValue}
  }
  /// Returns true if `soilTemperature` has been explicitly set.
  public var hasSoilTemperature: Bool {return _storage._soilTemperature != nil}
  /// Clears the value of `soilTemperature`. Subsequent reads from it will return its default value.
  public mutating func clearSoilTemperature() {_uniqueStorage()._soilTemperature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

///
/// Power Metrics (voltage / current / etc)
public struct PowerMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Voltage (Ch1)
  public var ch1Voltage: Float {
    get {return _ch1Voltage ?? 0}
    set {_ch1Voltage = newValue}
  }
  /// Returns true if `ch1Voltage` has been explicitly set.
  public var hasCh1Voltage: Bool {return self._ch1Voltage != nil}
  /// Clears the value of `ch1Voltage`. Subsequent reads from it will return its default value.
  public mutating func clearCh1Voltage() {self._ch1Voltage = nil}

  ///
  /// Current (Ch1)
  public var ch1Current: Float {
    get {return _ch1Current ?? 0}
    set {_ch1Current = newValue}
  }
  /// Returns true if `ch1Current` has been explicitly set.
  public var hasCh1Current: Bool {return self._ch1Current != nil}
  /// Clears the value of `ch1Current`. Subsequent reads from it will return its default value.
  public mutating func clearCh1Current() {self._ch1Current = nil}

  ///
  /// Voltage (Ch2)
  public var ch2Voltage: Float {
    get {return _ch2Voltage ?? 0}
    set {_ch2Voltage = newValue}
  }
  /// Returns true if `ch2Voltage` has been explicitly set.
  public var hasCh2Voltage: Bool {return self._ch2Voltage != nil}
  /// Clears the value of `ch2Voltage`. Subsequent reads from it will return its default value.
  public mutating func clearCh2Voltage() {self._ch2Voltage = nil}

  ///
  /// Current (Ch2)
  public var ch2Current: Float {
    get {return _ch2Current ?? 0}
    set {_ch2Current = newValue}
  }
  /// Returns true if `ch2Current` has been explicitly set.
  public var hasCh2Current: Bool {return self._ch2Current != nil}
  /// Clears the value of `ch2Current`. Subsequent reads from it will return its default value.
  public mutating func clearCh2Current() {self._ch2Current = nil}

  ///
  /// Voltage (Ch3)
  public var ch3Voltage: Float {
    get {return _ch3Voltage ?? 0}
    set {_ch3Voltage = newValue}
  }
  /// Returns true if `ch3Voltage` has been explicitly set.
  public var hasCh3Voltage: Bool {return self._ch3Voltage != nil}
  /// Clears the value of `ch3Voltage`. Subsequent reads from it will return its default value.
  public mutating func clearCh3Voltage() {self._ch3Voltage = nil}

  ///
  /// Current (Ch3)
  public var ch3Current: Float {
    get {return _ch3Current ?? 0}
    set {_ch3Current = newValue}
  }
  /// Returns true if `ch3Current` has been explicitly set.
  public var hasCh3Current: Bool {return self._ch3Current != nil}
  /// Clears the value of `ch3Current`. Subsequent reads from it will return its default value.
  public mutating func clearCh3Current() {self._ch3Current = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _ch1Voltage: Float? = nil
  fileprivate var _ch1Current: Float? = nil
  fileprivate var _ch2Voltage: Float? = nil
  fileprivate var _ch2Current: Float? = nil
  fileprivate var _ch3Voltage: Float? = nil
  fileprivate var _ch3Current: Float? = nil
}

///
/// Air quality metrics
public struct AirQualityMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Concentration Units Standard PM1.0
  public var pm10Standard: UInt32 {
    get {return _pm10Standard ?? 0}
    set {_pm10Standard = newValue}
  }
  /// Returns true if `pm10Standard` has been explicitly set.
  public var hasPm10Standard: Bool {return self._pm10Standard != nil}
  /// Clears the value of `pm10Standard`. Subsequent reads from it will return its default value.
  public mutating func clearPm10Standard() {self._pm10Standard = nil}

  ///
  /// Concentration Units Standard PM2.5
  public var pm25Standard: UInt32 {
    get {return _pm25Standard ?? 0}
    set {_pm25Standard = newValue}
  }
  /// Returns true if `pm25Standard` has been explicitly set.
  public var hasPm25Standard: Bool {return self._pm25Standard != nil}
  /// Clears the value of `pm25Standard`. Subsequent reads from it will return its default value.
  public mutating func clearPm25Standard() {self._pm25Standard = nil}

  ///
  /// Concentration Units Standard PM10.0
  public var pm100Standard: UInt32 {
    get {return _pm100Standard ?? 0}
    set {_pm100Standard = newValue}
  }
  /// Returns true if `pm100Standard` has been explicitly set.
  public var hasPm100Standard: Bool {return self._pm100Standard != nil}
  /// Clears the value of `pm100Standard`. Subsequent reads from it will return its default value.
  public mutating func clearPm100Standard() {self._pm100Standard = nil}

  ///
  /// Concentration Units Environmental PM1.0
  public var pm10Environmental: UInt32 {
    get {return _pm10Environmental ?? 0}
    set {_pm10Environmental = newValue}
  }
  /// Returns true if `pm10Environmental` has been explicitly set.
  public var hasPm10Environmental: Bool {return self._pm10Environmental != nil}
  /// Clears the value of `pm10Environmental`. Subsequent reads from it will return its default value.
  public mutating func clearPm10Environmental() {self._pm10Environmental = nil}

  ///
  /// Concentration Units Environmental PM2.5
  public var pm25Environmental: UInt32 {
    get {return _pm25Environmental ?? 0}
    set {_pm25Environmental = newValue}
  }
  /// Returns true if `pm25Environmental` has been explicitly set.
  public var hasPm25Environmental: Bool {return self._pm25Environmental != nil}
  /// Clears the value of `pm25Environmental`. Subsequent reads from it will return its default value.
  public mutating func clearPm25Environmental() {self._pm25Environmental = nil}

  ///
  /// Concentration Units Environmental PM10.0
  public var pm100Environmental: UInt32 {
    get {return _pm100Environmental ?? 0}
    set {_pm100Environmental = newValue}
  }
  /// Returns true if `pm100Environmental` has been explicitly set.
  public var hasPm100Environmental: Bool {return self._pm100Environmental != nil}
  /// Clears the value of `pm100Environmental`. Subsequent reads from it will return its default value.
  public mutating func clearPm100Environmental() {self._pm100Environmental = nil}

  ///
  /// 0.3um Particle Count
  public var particles03Um: UInt32 {
    get {return _particles03Um ?? 0}
    set {_particles03Um = newValue}
  }
  /// Returns true if `particles03Um` has been explicitly set.
  public var hasParticles03Um: Bool {return self._particles03Um != nil}
  /// Clears the value of `particles03Um`. Subsequent reads from it will return its default value.
  public mutating func clearParticles03Um() {self._particles03Um = nil}

  ///
  /// 0.5um Particle Count
  public var particles05Um: UInt32 {
    get {return _particles05Um ?? 0}
    set {_particles05Um = newValue}
  }
  /// Returns true if `particles05Um` has been explicitly set.
  public var hasParticles05Um: Bool {return self._particles05Um != nil}
  /// Clears the value of `particles05Um`. Subsequent reads from it will return its default value.
  public mutating func clearParticles05Um() {self._particles05Um = nil}

  ///
  /// 1.0um Particle Count
  public var particles10Um: UInt32 {
    get {return _particles10Um ?? 0}
    set {_particles10Um = newValue}
  }
  /// Returns true if `particles10Um` has been explicitly set.
  public var hasParticles10Um: Bool {return self._particles10Um != nil}
  /// Clears the value of `particles10Um`. Subsequent reads from it will return its default value.
  public mutating func clearParticles10Um() {self._particles10Um = nil}

  ///
  /// 2.5um Particle Count
  public var particles25Um: UInt32 {
    get {return _particles25Um ?? 0}
    set {_particles25Um = newValue}
  }
  /// Returns true if `particles25Um` has been explicitly set.
  public var hasParticles25Um: Bool {return self._particles25Um != nil}
  /// Clears the value of `particles25Um`. Subsequent reads from it will return its default value.
  public mutating func clearParticles25Um() {self._particles25Um = nil}

  ///
  /// 5.0um Particle Count
  public var particles50Um: UInt32 {
    get {return _particles50Um ?? 0}
    set {_particles50Um = newValue}
  }
  /// Returns true if `particles50Um` has been explicitly set.
  public var hasParticles50Um: Bool {return self._particles50Um != nil}
  /// Clears the value of `particles50Um`. Subsequent reads from it will return its default value.
  public mutating func clearParticles50Um() {self._particles50Um = nil}

  ///
  /// 10.0um Particle Count
  public var particles100Um: UInt32 {
    get {return _particles100Um ?? 0}
    set {_particles100Um = newValue}
  }
  /// Returns true if `particles100Um` has been explicitly set.
  public var hasParticles100Um: Bool {return self._particles100Um != nil}
  /// Clears the value of `particles100Um`. Subsequent reads from it will return its default value.
  public mutating func clearParticles100Um() {self._particles100Um = nil}

  ///
  /// 10.0um Particle Count
  public var co2: UInt32 {
    get {return _co2 ?? 0}
    set {_co2 = newValue}
  }
  /// Returns true if `co2` has been explicitly set.
  public var hasCo2: Bool {return self._co2 != nil}
  /// Clears the value of `co2`. Subsequent reads from it will return its default value.
  public mutating func clearCo2() {self._co2 = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _pm10Standard: UInt32? = nil
  fileprivate var _pm25Standard: UInt32? = nil
  fileprivate var _pm100Standard: UInt32? = nil
  fileprivate var _pm10Environmental: UInt32? = nil
  fileprivate var _pm25Environmental: UInt32? = nil
  fileprivate var _pm100Environmental: UInt32? = nil
  fileprivate var _particles03Um: UInt32? = nil
  fileprivate var _particles05Um: UInt32? = nil
  fileprivate var _particles10Um: UInt32? = nil
  fileprivate var _particles25Um: UInt32? = nil
  fileprivate var _particles50Um: UInt32? = nil
  fileprivate var _particles100Um: UInt32? = nil
  fileprivate var _co2: UInt32? = nil
}

///
/// Local device mesh statistics
public struct LocalStats: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// How long the device has been running since the last reboot (in seconds)
  public var uptimeSeconds: UInt32 = 0

  ///
  /// Utilization for the current channel, including well formed TX, RX and malformed RX (aka noise).
  public var channelUtilization: Float = 0

  ///
  /// Percent of airtime for transmission used within the last hour.
  public var airUtilTx: Float = 0

  ///
  /// Number of packets sent
  public var numPacketsTx: UInt32 = 0

  ///
  /// Number of packets received (both good and bad)
  public var numPacketsRx: UInt32 = 0

  ///
  /// Number of packets received that are malformed or violate the protocol
  public var numPacketsRxBad: UInt32 = 0

  ///
  /// Number of nodes online (in the past 2 hours)
  public var numOnlineNodes: UInt32 = 0

  ///
  /// Number of nodes total
  public var numTotalNodes: UInt32 = 0

  ///
  /// Number of received packets that were duplicates (due to multiple nodes relaying).
  /// If this number is high, there are nodes in the mesh relaying packets when it's unnecessary, for example due to the ROUTER/REPEATER role.
  public var numRxDupe: UInt32 = 0

  ///
  /// Number of packets we transmitted that were a relay for others (not originating from ourselves).
  public var numTxRelay: UInt32 = 0

  ///
  /// Number of times we canceled a packet to be relayed, because someone else did it before us.
  /// This will always be zero for ROUTERs/REPEATERs. If this number is high, some other node(s) is/are relaying faster than you.
  public var numTxRelayCanceled: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

///
/// Health telemetry metrics
public struct HealthMetrics: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Heart rate (beats per minute)
  public var heartBpm: UInt32 {
    get {return _heartBpm ?? 0}
    set {_heartBpm = newValue}
  }
  /// Returns true if `heartBpm` has been explicitly set.
  public var hasHeartBpm: Bool {return self._heartBpm != nil}
  /// Clears the value of `heartBpm`. Subsequent reads from it will return its default value.
  public mutating func clearHeartBpm() {self._heartBpm = nil}

  ///
  /// SpO2 (blood oxygen saturation) level
  public var spO2: UInt32 {
    get {return _spO2 ?? 0}
    set {_spO2 = newValue}
  }
  /// Returns true if `spO2` has been explicitly set.
  public var hasSpO2: Bool {return self._spO2 != nil}
  /// Clears the value of `spO2`. Subsequent reads from it will return its default value.
  public mutating func clearSpO2() {self._spO2 = nil}

  ///
  /// Body temperature in degrees Celsius
  public var temperature: Float {
    get {return _temperature ?? 0}
    set {_temperature = newValue}
  }
  /// Returns true if `temperature` has been explicitly set.
  public var hasTemperature: Bool {return self._temperature != nil}
  /// Clears the value of `temperature`. Subsequent reads from it will return its default value.
  public mutating func clearTemperature() {self._temperature = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _heartBpm: UInt32? = nil
  fileprivate var _spO2: UInt32? = nil
  fileprivate var _temperature: Float? = nil
}

///
/// Types of Measurements the telemetry module is equipped to handle
public struct Telemetry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// Seconds since 1970 - or 0 for unknown/unset
  public var time: UInt32 = 0

  public var variant: Telemetry.OneOf_Variant? = nil

  ///
  /// Key native device metrics such as battery level
  public var deviceMetrics: DeviceMetrics {
    get {
      if case .deviceMetrics(let v)? = variant {return v}
      return DeviceMetrics()
    }
    set {variant = .deviceMetrics(newValue)}
  }

  ///
  /// Weather station or other environmental metrics
  public var environmentMetrics: EnvironmentMetrics {
    get {
      if case .environmentMetrics(let v)? = variant {return v}
      return EnvironmentMetrics()
    }
    set {variant = .environmentMetrics(newValue)}
  }

  ///
  /// Air quality metrics
  public var airQualityMetrics: AirQualityMetrics {
    get {
      if case .airQualityMetrics(let v)? = variant {return v}
      return AirQualityMetrics()
    }
    set {variant = .airQualityMetrics(newValue)}
  }

  ///
  /// Power Metrics
  public var powerMetrics: PowerMetrics {
    get {
      if case .powerMetrics(let v)? = variant {return v}
      return PowerMetrics()
    }
    set {variant = .powerMetrics(newValue)}
  }

  ///
  /// Local device mesh statistics
  public var localStats: LocalStats {
    get {
      if case .localStats(let v)? = variant {return v}
      return LocalStats()
    }
    set {variant = .localStats(newValue)}
  }

  ///
  /// Health telemetry metrics
  public var healthMetrics: HealthMetrics {
    get {
      if case .healthMetrics(let v)? = variant {return v}
      return HealthMetrics()
    }
    set {variant = .healthMetrics(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Variant: Equatable, Sendable {
    ///
    /// Key native device metrics such as battery level
    case deviceMetrics(DeviceMetrics)
    ///
    /// Weather station or other environmental metrics
    case environmentMetrics(EnvironmentMetrics)
    ///
    /// Air quality metrics
    case airQualityMetrics(AirQualityMetrics)
    ///
    /// Power Metrics
    case powerMetrics(PowerMetrics)
    ///
    /// Local device mesh statistics
    case localStats(LocalStats)
    ///
    /// Health telemetry metrics
    case healthMetrics(HealthMetrics)

  }

  public init() {}
}

///
/// NAU7802 Telemetry configuration, for saving to flash
public struct Nau7802Config: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  ///
  /// The offset setting for the NAU7802
  public var zeroOffset: Int32 = 0

  ///
  /// The calibration factor for the NAU7802
  public var calibrationFactor: Float = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "meshtastic"

extension TelemetrySensorType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SENSOR_UNSET"),
    1: .same(proto: "BME280"),
    2: .same(proto: "BME680"),
    3: .same(proto: "MCP9808"),
    4: .same(proto: "INA260"),
    5: .same(proto: "INA219"),
    6: .same(proto: "BMP280"),
    7: .same(proto: "SHTC3"),
    8: .same(proto: "LPS22"),
    9: .same(proto: "QMC6310"),
    10: .same(proto: "QMI8658"),
    11: .same(proto: "QMC5883L"),
    12: .same(proto: "SHT31"),
    13: .same(proto: "PMSA003I"),
    14: .same(proto: "INA3221"),
    15: .same(proto: "BMP085"),
    16: .same(proto: "RCWL9620"),
    17: .same(proto: "SHT4X"),
    18: .same(proto: "VEML7700"),
    19: .same(proto: "MLX90632"),
    20: .same(proto: "OPT3001"),
    21: .same(proto: "LTR390UV"),
    22: .same(proto: "TSL25911FN"),
    23: .same(proto: "AHT10"),
    24: .same(proto: "DFROBOT_LARK"),
    25: .same(proto: "NAU7802"),
    26: .same(proto: "BMP3XX"),
    27: .same(proto: "ICM20948"),
    28: .same(proto: "MAX17048"),
    29: .same(proto: "CUSTOM_SENSOR"),
    30: .same(proto: "MAX30102"),
    31: .same(proto: "MLX90614"),
    32: .same(proto: "SCD4X"),
    33: .same(proto: "RADSENS"),
    34: .same(proto: "INA226"),
    35: .same(proto: "DFROBOT_RAIN"),
    36: .same(proto: "DPS310"),
    37: .same(proto: "RAK12035"),
  ]
}

extension DeviceMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DeviceMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "battery_level"),
    2: .same(proto: "voltage"),
    3: .standard(proto: "channel_utilization"),
    4: .standard(proto: "air_util_tx"),
    5: .standard(proto: "uptime_seconds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._batteryLevel) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._voltage) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._channelUtilization) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._airUtilTx) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._uptimeSeconds) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._batteryLevel {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._voltage {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._channelUtilization {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._airUtilTx {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._uptimeSeconds {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: DeviceMetrics, rhs: DeviceMetrics) -> Bool {
    if lhs._batteryLevel != rhs._batteryLevel {return false}
    if lhs._voltage != rhs._voltage {return false}
    if lhs._channelUtilization != rhs._channelUtilization {return false}
    if lhs._airUtilTx != rhs._airUtilTx {return false}
    if lhs._uptimeSeconds != rhs._uptimeSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension EnvironmentMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EnvironmentMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "temperature"),
    2: .standard(proto: "relative_humidity"),
    3: .standard(proto: "barometric_pressure"),
    4: .standard(proto: "gas_resistance"),
    5: .same(proto: "voltage"),
    6: .same(proto: "current"),
    7: .same(proto: "iaq"),
    8: .same(proto: "distance"),
    9: .same(proto: "lux"),
    10: .standard(proto: "white_lux"),
    11: .standard(proto: "ir_lux"),
    12: .standard(proto: "uv_lux"),
    13: .standard(proto: "wind_direction"),
    14: .standard(proto: "wind_speed"),
    15: .same(proto: "weight"),
    16: .standard(proto: "wind_gust"),
    17: .standard(proto: "wind_lull"),
    18: .same(proto: "radiation"),
    19: .standard(proto: "rainfall_1h"),
    20: .standard(proto: "rainfall_24h"),
    21: .standard(proto: "soil_moisture"),
    22: .standard(proto: "soil_temperature"),
  ]

  fileprivate class _StorageClass {
    var _temperature: Float? = nil
    var _relativeHumidity: Float? = nil
    var _barometricPressure: Float? = nil
    var _gasResistance: Float? = nil
    var _voltage: Float? = nil
    var _current: Float? = nil
    var _iaq: UInt32? = nil
    var _distance: Float? = nil
    var _lux: Float? = nil
    var _whiteLux: Float? = nil
    var _irLux: Float? = nil
    var _uvLux: Float? = nil
    var _windDirection: UInt32? = nil
    var _windSpeed: Float? = nil
    var _weight: Float? = nil
    var _windGust: Float? = nil
    var _windLull: Float? = nil
    var _radiation: Float? = nil
    var _rainfall1H: Float? = nil
    var _rainfall24H: Float? = nil
    var _soilMoisture: UInt32? = nil
    var _soilTemperature: Float? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _temperature = source._temperature
      _relativeHumidity = source._relativeHumidity
      _barometricPressure = source._barometricPressure
      _gasResistance = source._gasResistance
      _voltage = source._voltage
      _current = source._current
      _iaq = source._iaq
      _distance = source._distance
      _lux = source._lux
      _whiteLux = source._whiteLux
      _irLux = source._irLux
      _uvLux = source._uvLux
      _windDirection = source._windDirection
      _windSpeed = source._windSpeed
      _weight = source._weight
      _windGust = source._windGust
      _windLull = source._windLull
      _radiation = source._radiation
      _rainfall1H = source._rainfall1H
      _rainfall24H = source._rainfall24H
      _soilMoisture = source._soilMoisture
      _soilTemperature = source._soilTemperature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularFloatField(value: &_storage._temperature) }()
        case 2: try { try decoder.decodeSingularFloatField(value: &_storage._relativeHumidity) }()
        case 3: try { try decoder.decodeSingularFloatField(value: &_storage._barometricPressure) }()
        case 4: try { try decoder.decodeSingularFloatField(value: &_storage._gasResistance) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._voltage) }()
        case 6: try { try decoder.decodeSingularFloatField(value: &_storage._current) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._iaq) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._distance) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._lux) }()
        case 10: try { try decoder.decodeSingularFloatField(value: &_storage._whiteLux) }()
        case 11: try { try decoder.decodeSingularFloatField(value: &_storage._irLux) }()
        case 12: try { try decoder.decodeSingularFloatField(value: &_storage._uvLux) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._windDirection) }()
        case 14: try { try decoder.decodeSingularFloatField(value: &_storage._windSpeed) }()
        case 15: try { try decoder.decodeSingularFloatField(value: &_storage._weight) }()
        case 16: try { try decoder.decodeSingularFloatField(value: &_storage._windGust) }()
        case 17: try { try decoder.decodeSingularFloatField(value: &_storage._windLull) }()
        case 18: try { try decoder.decodeSingularFloatField(value: &_storage._radiation) }()
        case 19: try { try decoder.decodeSingularFloatField(value: &_storage._rainfall1H) }()
        case 20: try { try decoder.decodeSingularFloatField(value: &_storage._rainfall24H) }()
        case 21: try { try decoder.decodeSingularUInt32Field(value: &_storage._soilMoisture) }()
        case 22: try { try decoder.decodeSingularFloatField(value: &_storage._soilTemperature) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._temperature {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._relativeHumidity {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._barometricPressure {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._gasResistance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._voltage {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._current {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._iaq {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._distance {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._lux {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._whiteLux {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._irLux {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._uvLux {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._windDirection {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._windSpeed {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._weight {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._windGust {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._windLull {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._radiation {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._rainfall1H {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._rainfall24H {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._soilMoisture {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._soilTemperature {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 22)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: EnvironmentMetrics, rhs: EnvironmentMetrics) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._temperature != rhs_storage._temperature {return false}
        if _storage._relativeHumidity != rhs_storage._relativeHumidity {return false}
        if _storage._barometricPressure != rhs_storage._barometricPressure {return false}
        if _storage._gasResistance != rhs_storage._gasResistance {return false}
        if _storage._voltage != rhs_storage._voltage {return false}
        if _storage._current != rhs_storage._current {return false}
        if _storage._iaq != rhs_storage._iaq {return false}
        if _storage._distance != rhs_storage._distance {return false}
        if _storage._lux != rhs_storage._lux {return false}
        if _storage._whiteLux != rhs_storage._whiteLux {return false}
        if _storage._irLux != rhs_storage._irLux {return false}
        if _storage._uvLux != rhs_storage._uvLux {return false}
        if _storage._windDirection != rhs_storage._windDirection {return false}
        if _storage._windSpeed != rhs_storage._windSpeed {return false}
        if _storage._weight != rhs_storage._weight {return false}
        if _storage._windGust != rhs_storage._windGust {return false}
        if _storage._windLull != rhs_storage._windLull {return false}
        if _storage._radiation != rhs_storage._radiation {return false}
        if _storage._rainfall1H != rhs_storage._rainfall1H {return false}
        if _storage._rainfall24H != rhs_storage._rainfall24H {return false}
        if _storage._soilMoisture != rhs_storage._soilMoisture {return false}
        if _storage._soilTemperature != rhs_storage._soilTemperature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PowerMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PowerMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "ch1_voltage"),
    2: .standard(proto: "ch1_current"),
    3: .standard(proto: "ch2_voltage"),
    4: .standard(proto: "ch2_current"),
    5: .standard(proto: "ch3_voltage"),
    6: .standard(proto: "ch3_current"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._ch1Voltage) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._ch1Current) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._ch2Voltage) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._ch2Current) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self._ch3Voltage) }()
      case 6: try { try decoder.decodeSingularFloatField(value: &self._ch3Current) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ch1Voltage {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._ch1Current {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._ch2Voltage {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._ch2Current {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._ch3Voltage {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._ch3Current {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: PowerMetrics, rhs: PowerMetrics) -> Bool {
    if lhs._ch1Voltage != rhs._ch1Voltage {return false}
    if lhs._ch1Current != rhs._ch1Current {return false}
    if lhs._ch2Voltage != rhs._ch2Voltage {return false}
    if lhs._ch2Current != rhs._ch2Current {return false}
    if lhs._ch3Voltage != rhs._ch3Voltage {return false}
    if lhs._ch3Current != rhs._ch3Current {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension AirQualityMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AirQualityMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pm10_standard"),
    2: .standard(proto: "pm25_standard"),
    3: .standard(proto: "pm100_standard"),
    4: .standard(proto: "pm10_environmental"),
    5: .standard(proto: "pm25_environmental"),
    6: .standard(proto: "pm100_environmental"),
    7: .standard(proto: "particles_03um"),
    8: .standard(proto: "particles_05um"),
    9: .standard(proto: "particles_10um"),
    10: .standard(proto: "particles_25um"),
    11: .standard(proto: "particles_50um"),
    12: .standard(proto: "particles_100um"),
    13: .same(proto: "co2"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._pm10Standard) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._pm25Standard) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._pm100Standard) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._pm10Environmental) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._pm25Environmental) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._pm100Environmental) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._particles03Um) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._particles05Um) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._particles10Um) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._particles25Um) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self._particles50Um) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self._particles100Um) }()
      case 13: try { try decoder.decodeSingularUInt32Field(value: &self._co2) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._pm10Standard {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._pm25Standard {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._pm100Standard {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._pm10Environmental {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._pm25Environmental {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._pm100Environmental {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._particles03Um {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._particles05Um {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._particles10Um {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._particles25Um {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._particles50Um {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._particles100Um {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._co2 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: AirQualityMetrics, rhs: AirQualityMetrics) -> Bool {
    if lhs._pm10Standard != rhs._pm10Standard {return false}
    if lhs._pm25Standard != rhs._pm25Standard {return false}
    if lhs._pm100Standard != rhs._pm100Standard {return false}
    if lhs._pm10Environmental != rhs._pm10Environmental {return false}
    if lhs._pm25Environmental != rhs._pm25Environmental {return false}
    if lhs._pm100Environmental != rhs._pm100Environmental {return false}
    if lhs._particles03Um != rhs._particles03Um {return false}
    if lhs._particles05Um != rhs._particles05Um {return false}
    if lhs._particles10Um != rhs._particles10Um {return false}
    if lhs._particles25Um != rhs._particles25Um {return false}
    if lhs._particles50Um != rhs._particles50Um {return false}
    if lhs._particles100Um != rhs._particles100Um {return false}
    if lhs._co2 != rhs._co2 {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension LocalStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LocalStats"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "uptime_seconds"),
    2: .standard(proto: "channel_utilization"),
    3: .standard(proto: "air_util_tx"),
    4: .standard(proto: "num_packets_tx"),
    5: .standard(proto: "num_packets_rx"),
    6: .standard(proto: "num_packets_rx_bad"),
    7: .standard(proto: "num_online_nodes"),
    8: .standard(proto: "num_total_nodes"),
    9: .standard(proto: "num_rx_dupe"),
    10: .standard(proto: "num_tx_relay"),
    11: .standard(proto: "num_tx_relay_canceled"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.uptimeSeconds) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.channelUtilization) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.airUtilTx) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self.numPacketsTx) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self.numPacketsRx) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self.numPacketsRxBad) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self.numOnlineNodes) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self.numTotalNodes) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self.numRxDupe) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self.numTxRelay) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self.numTxRelayCanceled) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.uptimeSeconds != 0 {
      try visitor.visitSingularUInt32Field(value: self.uptimeSeconds, fieldNumber: 1)
    }
    if self.channelUtilization.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.channelUtilization, fieldNumber: 2)
    }
    if self.airUtilTx.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.airUtilTx, fieldNumber: 3)
    }
    if self.numPacketsTx != 0 {
      try visitor.visitSingularUInt32Field(value: self.numPacketsTx, fieldNumber: 4)
    }
    if self.numPacketsRx != 0 {
      try visitor.visitSingularUInt32Field(value: self.numPacketsRx, fieldNumber: 5)
    }
    if self.numPacketsRxBad != 0 {
      try visitor.visitSingularUInt32Field(value: self.numPacketsRxBad, fieldNumber: 6)
    }
    if self.numOnlineNodes != 0 {
      try visitor.visitSingularUInt32Field(value: self.numOnlineNodes, fieldNumber: 7)
    }
    if self.numTotalNodes != 0 {
      try visitor.visitSingularUInt32Field(value: self.numTotalNodes, fieldNumber: 8)
    }
    if self.numRxDupe != 0 {
      try visitor.visitSingularUInt32Field(value: self.numRxDupe, fieldNumber: 9)
    }
    if self.numTxRelay != 0 {
      try visitor.visitSingularUInt32Field(value: self.numTxRelay, fieldNumber: 10)
    }
    if self.numTxRelayCanceled != 0 {
      try visitor.visitSingularUInt32Field(value: self.numTxRelayCanceled, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: LocalStats, rhs: LocalStats) -> Bool {
    if lhs.uptimeSeconds != rhs.uptimeSeconds {return false}
    if lhs.channelUtilization != rhs.channelUtilization {return false}
    if lhs.airUtilTx != rhs.airUtilTx {return false}
    if lhs.numPacketsTx != rhs.numPacketsTx {return false}
    if lhs.numPacketsRx != rhs.numPacketsRx {return false}
    if lhs.numPacketsRxBad != rhs.numPacketsRxBad {return false}
    if lhs.numOnlineNodes != rhs.numOnlineNodes {return false}
    if lhs.numTotalNodes != rhs.numTotalNodes {return false}
    if lhs.numRxDupe != rhs.numRxDupe {return false}
    if lhs.numTxRelay != rhs.numTxRelay {return false}
    if lhs.numTxRelayCanceled != rhs.numTxRelayCanceled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension HealthMetrics: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".HealthMetrics"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "heart_bpm"),
    2: .same(proto: "spO2"),
    3: .same(proto: "temperature"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._heartBpm) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._spO2) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._temperature) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._heartBpm {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._spO2 {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._temperature {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: HealthMetrics, rhs: HealthMetrics) -> Bool {
    if lhs._heartBpm != rhs._heartBpm {return false}
    if lhs._spO2 != rhs._spO2 {return false}
    if lhs._temperature != rhs._temperature {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Telemetry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Telemetry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .standard(proto: "device_metrics"),
    3: .standard(proto: "environment_metrics"),
    4: .standard(proto: "air_quality_metrics"),
    5: .standard(proto: "power_metrics"),
    6: .standard(proto: "local_stats"),
    7: .standard(proto: "health_metrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFixed32Field(value: &self.time) }()
      case 2: try {
        var v: DeviceMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .deviceMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .deviceMetrics(v)
        }
      }()
      case 3: try {
        var v: EnvironmentMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .environmentMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .environmentMetrics(v)
        }
      }()
      case 4: try {
        var v: AirQualityMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .airQualityMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .airQualityMetrics(v)
        }
      }()
      case 5: try {
        var v: PowerMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .powerMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .powerMetrics(v)
        }
      }()
      case 6: try {
        var v: LocalStats?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .localStats(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .localStats(v)
        }
      }()
      case 7: try {
        var v: HealthMetrics?
        var hadOneofValue = false
        if let current = self.variant {
          hadOneofValue = true
          if case .healthMetrics(let m) = current {v = m}
        }
        try decoder.decodeSingularMessageField(value: &v)
        if let v = v {
          if hadOneofValue {try decoder.handleConflictingOneOf()}
          self.variant = .healthMetrics(v)
        }
      }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.time != 0 {
      try visitor.visitSingularFixed32Field(value: self.time, fieldNumber: 1)
    }
    switch self.variant {
    case .deviceMetrics?: try {
      guard case .deviceMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }()
    case .environmentMetrics?: try {
      guard case .environmentMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    }()
    case .airQualityMetrics?: try {
      guard case .airQualityMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    }()
    case .powerMetrics?: try {
      guard case .powerMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    }()
    case .localStats?: try {
      guard case .localStats(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    }()
    case .healthMetrics?: try {
      guard case .healthMetrics(let v)? = self.variant else { preconditionFailure() }
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    }()
    case nil: break
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Telemetry, rhs: Telemetry) -> Bool {
    if lhs.time != rhs.time {return false}
    if lhs.variant != rhs.variant {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Nau7802Config: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Nau7802Config"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "zeroOffset"),
    2: .same(proto: "calibrationFactor"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.zeroOffset) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.calibrationFactor) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.zeroOffset != 0 {
      try visitor.visitSingularInt32Field(value: self.zeroOffset, fieldNumber: 1)
    }
    if self.calibrationFactor.bitPattern != 0 {
      try visitor.visitSingularFloatField(value: self.calibrationFactor, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Nau7802Config, rhs: Nau7802Config) -> Bool {
    if lhs.zeroOffset != rhs.zeroOffset {return false}
    if lhs.calibrationFactor != rhs.calibrationFactor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
